version: '3.9'

services:
  # Api-Gateway Service Definition ( User requests will first come to the api-gateway. )
  api-gateway:
    build:
      context: ./../api-gateway  # Path to the API Gateway code
      dockerfile: ./../api-gateway/api-gateway.dockerfile  # Dockerfile for API Gateway
    image: ${API_GATEWAY_SERVICE_IMAGE_NAME}
    container_name: ${API_GATEWAY_SERVICE_CONTAINER_NAME}
    restart: always
    depends_on:
      - order-service  # Wait for the order service to be available
    ports:
      - "${API_GATEWAY_SERVICE_PORT}:${API_GATEWAY_SERVICE_PORT}"  # Expose API Gateway's port
    env_file:
      - .env  # Provide the relative path to .env file
    networks:
      - mynetwork

  # Order Service Definition
  order-service:
    build:
      context: ./../order-service  # Path to the order service code
      dockerfile: ./../order-service/order-service.dockerfile  # Dockerfile for Order service
    image: ${ORDER_SERVICE_IMAGE_NAME}
    container_name: ${ORDER_SERVICE_CONTAINER_NAME}
    restart: always
    depends_on:
      - rabbitmq  # Wait for RabbitMQ to be healthy
    ports:
      - "${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}"  # Expose Order service's port
    env_file:
      - .env  # Provide the relative path to .env file
    environment:
      - DB_HOST=order-db  # Set the DB host to the name of the container from the script
      - DB_PORT=5432
      - DB_USER=order
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=order-db
    networks:
      - mynetwork

  # RabbitMQ Definition
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ${RABBITMQ_CONTAINER_NAME}
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_MANAGEMENT_UI}:${RABBITMQ_MANAGEMENT_UI}"
    volumes:
      - rabbitmq_db_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 10
    networks:
      - mynetwork

# Volumes
volumes:
  rabbitmq_db_data:

# Networks Definition
networks:
  mynetwork:
    driver: bridge
