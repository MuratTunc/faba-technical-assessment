version: '3.9'

services:
  # Order Service Definition
  order-service:
    build:
      context: ./../order-service  # Path to the order service code
      dockerfile: ./../order-service/order-service.dockerfile  # Dockerfile for building the order service
    image: ${ORDER_SERVICE_IMAGE_NAME}  # Name of the Docker image for order service
    container_name: ${ORDER_SERVICE_CONTAINER_NAME}  # Container name for order service
    restart: always  # Restart the container automatically if it stops
    depends_on:
      order-db:
        condition: service_healthy  # Wait for the order database to be healthy before starting the service
    ports:
      - "${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}"  # Map the order service port from the host to the container
    env_file:
      - .env  # Load environment variables from .env file
    networks:
      - mynetwork  # Connect the service to the network

  # Customer Service Definition
  inventory-service:
    build:
      context: ./../inventory-service  # Path to the inventory service code
      dockerfile: ./../inventory-service/inventory-service.dockerfile  # Dockerfile for building the inventory service
    image: ${INVENTORY_SERVICE_IMAGE_NAME}  # Name of the Docker image for inventory service
    container_name: ${INVENTORY_SERVICE_CONTAINER_NAME}  # Container name for inventory service
    restart: always  # Restart the container automatically if it stops
    depends_on:
      inventory-db:
        condition: service_healthy  # Wait for the inventory database to be healthy before starting the service
    ports:
      - "${INVENTORY_SERVICE_PORT}:${INVENTORY_SERVICE_PORT}"  # Map the inventory service port from the host to the container
    env_file:
      - .env  # Load environment variables from .env file
    networks:
      - mynetwork  # Connect the service to the network

  # Notification Service Definition
  notification-service:
    build:
      context: ./../notification-service  # Path to the notification service code
      dockerfile: ./../notification-service/notification-service.dockerfile  # Dockerfile for building the notification service
    image: ${NOTIFICATION_SERVICE_IMAGE_NAME}  # Name of the Docker image for notification service
    container_name: ${NOTIFICATION_SERVICE_CONTAINER_NAME}  # Container name for notification service
    restart: always  # Restart the container automatically if it stops
    depends_on:
      notification-db:
        condition: service_healthy  # Wait for the notification database to be healthy before starting the service
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"  # Map the notification service port from the host to the container
    env_file:
      - .env  # Load environment variables from .env file
    networks:
      - mynetwork  # Connect the service to the network

  # Order Database Definition
  order-db:
    image: postgres:15  # Use the official PostgreSQL image version 15
    container_name: ${ORDER_POSTGRES_DB_CONTAINER_NAME}  # Container name for order database
    restart: always  # Restart the container automatically if it stops
    environment:
      POSTGRES_USER: ${ORDER_POSTGRES_DB_USER}  # PostgreSQL ordername
      POSTGRES_PASSWORD: ${ORDER_POSTGRES_DB_PASSWORD}  # PostgreSQL password
      POSTGRES_DB: ${ORDER_POSTGRES_DB_NAME}  # Name of the PostgreSQL database
    ports:
      - "${ORDER_POSTGRES_DB_PORT}:5432"  # Map PostgreSQL port from the host to the container
    healthcheck:  # Health check to ensure PostgreSQL is ready before starting order service
      test: ["CMD", "pg_isready", "-U", "${ORDER_POSTGRES_DB_USER}", "-d", "${ORDER_POSTGRES_DB_NAME}"]
      interval: 15s  # Interval between checks
      timeout: 5s  # Timeout duration
      retries: 10  # Number of retries before considering the service as unhealthy
    volumes:
      - order_db_data:/var/lib/postgresql/data  # Persistent storage for PostgreSQL data
    networks:
      - mynetwork  # Connect the service to the network

  # Inventory Database Definition
  inventory-db:
    image: postgres:15  # Use the official PostgreSQL image version 15
    container_name: ${INVENTORY_POSTGRES_DB_CONTAINER_NAME}  # Container name for inventory database
    restart: always  # Restart the container automatically if it stops
    environment:
      POSTGRES_USER: ${INVENTORY_POSTGRES_DB_USER}  # PostgreSQL ordername
      POSTGRES_PASSWORD: ${INVENTORY_POSTGRES_DB_PASSWORD}  # PostgreSQL password
      POSTGRES_DB: ${INVENTORY_POSTGRES_DB_NAME}  # Name of the PostgreSQL database
    ports:
      - "${INVENTORY_POSTGRES_DB_PORT}:5432"  # Map PostgreSQL port from the host to the container
    healthcheck:  # Health check to ensure PostgreSQL is ready before starting inventory service
      test: ["CMD", "pg_isready", "-U", "${INVENTORY_POSTGRES_DB_USER}", "-d", "${INVENTORY_POSTGRES_DB_NAME}"]
      interval: 15s  # Interval between checks
      timeout: 5s  # Timeout duration
      retries: 10  # Number of retries before considering the service as unhealthy
    volumes:
      - inventory_db_data:/var/lib/postgresql/data  # Persistent storage for PostgreSQL data
    networks:
      - mynetwork  # Connect the service to the network

  # Notification Database Definition
  notification-db:
    image: postgres:15  # Use the official PostgreSQL image version 15
    container_name: ${NOTIFICATION_POSTGRES_DB_CONTAINER_NAME}  # Container name for notification database
    restart: always  # Restart the container automatically if it stops
    environment:
      POSTGRES_USER: ${NOTIFICATION_POSTGRES_DB_USER}  # PostgreSQL ordername
      POSTGRES_PASSWORD: ${NOTIFICATION_POSTGRES_DB_PASSWORD}  # PostgreSQL password
      POSTGRES_DB: ${NOTIFICATION_POSTGRES_DB_NAME}  # Name of the PostgreSQL database
    ports:
      - "${NOTIFICATION_POSTGRES_DB_PORT}:5432"  # Map PostgreSQL port from the host to the container
    healthcheck:  # Health check to ensure PostgreSQL is ready before starting notification service
      test: ["CMD", "pg_isready", "-U", "${NOTIFICATION_POSTGRES_DB_USER}", "-d", "${NOTIFICATION_POSTGRES_DB_NAME}"]
      interval: 15s  # Interval between checks
      timeout: 5s  # Timeout duration
      retries: 10  # Number of retries before considering the service as unhealthy
    volumes:
      - notification_db_data:/var/lib/postgresql/data  # Persistent storage for PostgreSQL data
    networks:
      - mynetwork  # Connect the service to the network
  
  # RabbitMQ Definition
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ${RABBITMQ_CONTAINER_NAME}
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}  # Set from .env
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}  # Set from .env
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"  # RabbitMQ message broker port
      - "${RABBITMQ_MANAGEMENT_UI}:${RABBITMQ_MANAGEMENT_UI}"  # Management UI      
    volumes:
      - rabbitmq_db_data:/var/lib/rabbitmq    
    networks:
      - mynetwork  # Connect the service to the network

# Database Volumes
volumes:
  order_db_data:         # Define volume for order database data
  inventory_db_data:     # Define volume for inventory database data
  notification_db_data:  # Define volume for notification database data
  rabbitmq_db_data:      # Define volume for rabbitmq database data

# Networks Definition
networks:
  mynetwork:
    driver: bridge  # Use the default bridge network driver
