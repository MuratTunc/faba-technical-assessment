version: '3.9'

services:
  # Api-Gateway Service Definition
  api-gateway:
    build:
      context: ./api-gateway  # Path to the API Gateway code
      dockerfile: ./api-gateway/api-gateway.dockerfile  # Dockerfile for API Gateway
    image: ${API_GATEWAY_SERVICE_IMAGE_NAME}
    container_name: ${API_GATEWAY_SERVICE_CONTAINER_NAME}
    restart: always
    depends_on:
      - order-service  # Wait for the order service to be available
    ports:
      - "${API_GATEWAY_SERVICE_PORT}:${API_GATEWAY_SERVICE_PORT}"  # Expose API Gateway's port
    env_file:
      - ./build-tools/.env  # Provide the relative path to .env file
    networks:
      - mynetwork

  # Order Service Definition
  order-service:
    build:
      context: ./order-service  # Path to the order service code
      dockerfile: ./order-service/order-service.dockerfile  # Dockerfile for Order service
    image: ${ORDER_SERVICE_IMAGE_NAME}
    container_name: ${ORDER_SERVICE_CONTAINER_NAME}
    restart: always
    depends_on:
      - order-db  # Wait for the order database to be healthy
      - rabbitmq  # Wait for RabbitMQ to be healthy
    ports:
      - "${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}"  # Expose Order service's port
    env_file:
      - ./build-tools/.env  # Provide the relative path to .env file
    networks:
      - mynetwork

  # Order Database Definition
  order-db:
    image: postgres:15  # PostgreSQL image version 15
    container_name: ${ORDER_POSTGRES_DB_CONTAINER_NAME}
    restart: always
    environment:
      POSTGRES_USER: ${ORDER_POSTGRES_DB_USER}
      POSTGRES_PASSWORD: ${ORDER_POSTGRES_DB_PASSWORD}
      POSTGRES_DB: ${ORDER_POSTGRES_DB_NAME}
    ports:
      - "${ORDER_POSTGRES_DB_PORT}:5432"  # Expose PostgreSQL's port
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${ORDER_POSTGRES_DB_USER}", "-d", "${ORDER_POSTGRES_DB_NAME}"]
      interval: 15s
      timeout: 5s
      retries: 10
    volumes:
      - order_db_data:/var/lib/postgresql/data  # Persistent storage
    networks:
      - mynetwork

  # RabbitMQ Definition
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ${RABBITMQ_CONTAINER_NAME}
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_MANAGEMENT_UI}:${RABBITMQ_MANAGEMENT_UI}"
    volumes:
      - rabbitmq_db_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 10
    networks:
      - mynetwork

# Database Volumes
volumes:
  order_db_data:
  rabbitmq_db_data:

# Networks Definition
networks:
  mynetwork:
    driver: bridge
