version: '3.9'

services:
  # Api-Gateway Service Definition
  api-gateway:
    build:
      context: ./../api-gateway  # Path to the API Gateway code
      dockerfile: ./../api-gateway/api-gateway.dockerfile  # Dockerfile for API Gateway
    image: ${API_GATEWAY_SERVICE_IMAGE_NAME}
    container_name: ${API_GATEWAY_SERVICE_CONTAINER_NAME}
    restart: always
    depends_on:
      - order-service  # Wait for the order service to be available
      - rabbitmq
      - redis
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    ports:
      - "${API_GATEWAY_SERVICE_PORT}:${API_GATEWAY_SERVICE_PORT}"  # Expose API Gateway's port
    env_file:
      - .env  # Load the environment variables from .env
    networks:
      - mynetwork

  # Order Service Definition
  order-service:
    build:
      context: ./../order-service  # Path to the order service code
      dockerfile: ./../order-service/order-service.dockerfile  # Dockerfile for building the order service
    image: ${ORDER_SERVICE_IMAGE_NAME}  # Name of the Docker image for order service
    container_name: ${ORDER_SERVICE_CONTAINER_NAME}  # Container name for order service
    restart: always  # Restart the container automatically if it stops
    depends_on:
      order-db:
        condition: service_healthy  # Wait for the order database to be healthy before starting the service
    ports:
      - "${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}"  # Map the order service port from the host to the container
    env_file:
      - .env  # Load environment variables from .env file
    networks:
      - mynetwork  # Connect the service to the network

  # Inventory Service Definition
  inventory-service:
    build:
      context: ./../inventory-service  # Path to the service code
      dockerfile: ./../inventory-service/inventory-service.dockerfile  # Dockerfile for building the service
    image: ${INVENTORY_SERVICE_IMAGE_NAME}  # Name of the Docker image
    container_name: ${INVENTORY_SERVICE_CONTAINER_NAME}  # Container name
    restart: always  # Restart the container automatically if it stops
    depends_on:
      - rabbitmq
    ports:
      - "${INVENTORY_SERVICE_PORT}:${INVENTORY_SERVICE_PORT}"  # Map the service port from the host to the container
    env_file:
      - .env  # Load environment variables from .env file
    networks:
      - mynetwork  # Connect the service to the network

  # Notification Service Definition
  notification-service:
    build:
      context: ./../notification-service  # Path to the service code
      dockerfile: ./../notification-service/notification-service.dockerfile  # Dockerfile for building the service
    image: ${NOTIFICATION_SERVICE_IMAGE_NAME}  # Name of the Docker image 
    container_name: ${NOTIFICATION_SERVICE_CONTAINER_NAME}  # Container name
    restart: always  # Restart the container automatically if it stops
    depends_on:
      - rabbitmq
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"  # Map the  service port from the host to the container
    env_file:
      - .env  # Load environment variables from .env file
    networks:
      - mynetwork  # Connect the service to the network       

  # RabbitMQ Definition
  rabbitmq:
    image: rabbitmq:3-management
    container_name: ${RABBITMQ_CONTAINER_NAME}
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "${RABBITMQ_PORT}:${RABBITMQ_PORT}"
      - "${RABBITMQ_MANAGEMENT_UI}:${RABBITMQ_MANAGEMENT_UI}"
    volumes:
      - rabbitmq_db_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 10
    networks:
      - mynetwork

  
  # Redis Service
  redis:  # ✅ Redis Service
    image: redis:latest
    container_name: ${REDIS_CONTAINER_NAME}
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis-data:/data  # ✅ Persist Redis data
    command: [ "redis-server", "--save", "60", "1", "--loglevel", "warning" ]  # ✅ Configuring Redis persistence
    networks:
      - mynetwork    
    healthcheck:  # Optional: Health check for Redis
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5

  # Order Database Definition
  order-db:
    image: postgres:15  # Use the official PostgreSQL image version 15
    container_name: ${ORDER_POSTGRES_DB_CONTAINER_NAME}  # Container name for order database
    restart: always  # Restart the container automatically if it stops
    environment:
      POSTGRES_USER: ${ORDER_POSTGRES_DB_USER}  # PostgreSQL username
      POSTGRES_PASSWORD: ${ORDER_POSTGRES_DB_PASSWORD}  # PostgreSQL password
      POSTGRES_DB: ${ORDER_POSTGRES_DB_NAME}  # Name of the PostgreSQL database
    ports:
      - "${ORDER_POSTGRES_DB_PORT}:5432"  # Map PostgreSQL port from the host to the container
    healthcheck:  # Health check to ensure PostgreSQL is ready before starting order service
      test: ["CMD", "pg_isready", "-U", "${ORDER_POSTGRES_DB_USER}", "-d", "${ORDER_POSTGRES_DB_NAME}"]
      interval: 15s  # Interval between checks
      timeout: 5s  # Timeout duration
      retries: 10  # Number of retries before considering the service as unhealthy
    volumes:
      - order_db_data:/var/lib/postgresql/data  # Persistent storage for PostgreSQL data
      - ./init-order-db.sql:/docker-entrypoint-initdb.d/init-order-db.sql  # Mount the initialization script to create tables
    networks:
      - mynetwork  # Connect the service to the network


# Volumes
volumes:
  order_db_data:
  rabbitmq_db_data:
  redis-data:

# Networks Definition
networks:
  mynetwork:
    driver: bridge
